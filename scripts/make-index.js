const fs = require('fs');
const path = require('path');
const prettier = require('prettier');
const { transform } = require('babel-core');
const _ = require('lodash');

const ICONS_DIR = path.resolve('./src/icons');
const SRC_DIR = path.resolve('./src');
const DIST_DIR = path.resolve('./dist');

const numberToWord = n =>
  [
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
  ][n];

// safe identifiers for icon names
// 3d_something = ThreeDSomethignIcon
// delete = DeleteIcon
const safeIdentifier = name => {
  // change number to word: 3 => three
  if (!isNaN(parseInt(name.charAt(0)))) {
    name = numberToWord(name.charAt(0)) + '_' + name.substr(1);
  }

  return _.upperFirst(_.camelCase(`${name} icon`));
};

const createIndexes = () => {
  const impts = [];
  const expts = [];
  const files = fs.readdirSync(ICONS_DIR);
  files.forEach(file => {
    const identifier = safeIdentifier(file.replace(/\.js$/, ''));
    impts.push(`import ${identifier} from "./icons/${file}";`);
    expts.push(identifier);
  });

  const es6Template = `
    /*Autogenerated index*/

    ${impts.join('\n')}

    export {
    ${expts.join(',\n')}
    };

  `;

  const es6 = prettier.format(es6Template, { semi: true, parser: 'babylon' });

  const srcFileName = path.resolve(SRC_DIR, 'index.js');

  // save es6 to src/index
  fs.writeFile(srcFileName, es6, 'utf-8', err => {
    if (err) {
      throw err;
    }
    console.log(`index created on ${srcFileName}`);
    // resolve(destFileName);
  });

  const babel = transform(es6, {
    // presets: ['react'],
    plugins: ['transform-es2015-modules-commonjs'],
  });

  const js = babel.code;
  const distFileName = path.resolve(DIST_DIR, 'index.js');

  // save transpiled js to dist/index
  fs.writeFile(distFileName, js, 'utf-8', err => {
    if (err) {
      throw err;
    }
    console.log(`transpiled index saved to ${distFileName}`);
    // resolve(distFileName);
  });

  // console.log(js);
};

createIndexes();

// getIconFiles(SRC_DIR);
